# Auto detect text files and perform LF normalization
* text=auto


#test 

case 0:
          // En cas de suppression de l'avis
          if (sauce.userDisliked.includes(userId)) {
            Sauce.updateOne({ _id: sauceId }, {
              $inc: { dislikes: -1 },
              $pull: { userDisliked: userId },
              _id: sauceId
            })
              .then(() => res.status(200).json({ message: "Dislike retiré" }))
              .catch((error) => res.status(400).json({ error }));
          } else {
            Sauce.updateOne({ _id: sauceId }, {
              $inc: { likes: -1 },
              $pull: { userDisliked: userId },
              _id: sauceId
            })
              .then(() => res.status(200).json({ message: "Like retiré" }))
              .catch((error) => res.status(400).json({ error }));
          }
          break;

           switch (like) {

        case -1:
          // En cas de dislike
          Sauce.updateOne({ _id: sauceId }, {
            $inc: { dislikes: 1 },
            $push: { userDisliked: userId },
            _id: sauceId
          })
            .then(() => res.status(200).json({ message: "Dislike ajouté" }))
            .catch((error) => res.status(400).json({ error }));
          break;


        case 1:
          // En cas de Like
          Sauce.updateOne({ _id: sauceId }, {
            $inc: { likes: 1 },
            $push: { usersLiked: userId },
            _id: sauceId
          })
            .then(() => res.status(200).json({ message: "Like ajouté" }))
            .catch((error) => res.status(400).json({ error }));
          break;
      }